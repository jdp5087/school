###3.1###
PROMPT:
-----------------------------------------------------------------------------------------------------------------
Exercise 3.1.  An accumulator is a procedure that is called repeatedly with a single numeric argument and accumulates its arguments into a sum. Each time it is called, it returns the currently accumulated sum. Write a procedure make-accumulator that generates accumulators, each maintaining an independent sum. The input to make-accumulator should specify the initial value of the sum; for example

(define A (make-accumulator 5))
(A 10)
15
(A 10)
25
-----------------------------------------------------------------------------------------------------------------

(define (make-accumulator total)
  (lambda (increment)
    (begin
      (set! total (+ total increment))
      total)))

(define A (make-accumulator 5))
(A 10)
;Value: 15
(A 10)
;Value: 25

###3.2###
PROMPT:
-----------------------------------------------------------------------------------------------------------------
Exercise 3.2.  In software-testing applications, it is useful to be able to count the number of times a given procedure is called during the course of a computation. Write a procedure make-monitored that takes as input a procedure, f, that itself takes one input. The result returned by make-monitored is a third procedure, say mf, that keeps track of the number of times it has been called by maintaining an internal counter. If the input to mf is the special symbol how-many-calls?, then mf returns the value of the counter. If the input is the special symbol reset-count, then mf resets the counter to zero. For any other input, mf returns the result of calling f on that input and increments the counter. For instance, we could make a monitored version of the sqrt procedure:

(define s (make-monitored sqrt))

(s 100)
10

(s 'how-many-calls?)
1
-----------------------------------------------------------------------------------------------------------------

(define (make-monitored f)
  (let ((call-count 0))
    (define (how-many-calls?)
      call-count)
    (define (reset-count)
      (set! call-count 0))
    (define (mf arg)
      (cond ((equal? arg 'how-many-calls?) (how-many-calls?))
	    ((equal? arg 'reset-count)
	     (begin
	       (reset-count)
	       (how-many-calls?)))
	    (else
	     (begin
	       (set! call-count (+ call-count 1))
	       (f arg)))))
    mf))

(define s (make-monitored sqrt))

(s 100)
;Value: 10
(s 'how-many-calls?)
;Value: 1
(s 'reset-count)
;Value: 0

###3.3###
PROMPT:
-----------------------------------------------------------------------------------------------------------------
Exercise 3.3.  Modify the make-account procedure so that it creates password-protected accounts. That is, make-account should take a symbol as an additional argument, as in

(define acc (make-account 100 'secret-password))

The resulting account object should process a request only if it is accompanied by the password with which the account was created, and should otherwise return a complaint:

((acc 'secret-password 'withdraw) 40)
60

((acc 'some-other-password 'deposit) 50)
"Incorrect password"
-----------------------------------------------------------------------------------------------------------------

(define (make-account balance password)
  (define (make-withdrawal amount)
    (if (>= balance amount)
	(begin
	  (set! balance (- balance amount))
	  balance)
	"Insufficient funds"))
  (define (make-deposit amount)
    (begin
      (set! balance (+ balance amount))
      balance))
  (define (dispatch pass arg)
    (cond ((not (equal? password pass)) (lambda (amount) "Incorrect Password"))
	  ((equal? arg 'withdraw) make-withdrawal)
	  ((equal? arg 'deposit) make-deposit)
	  (else (error "unknown request -- MAKE-ACCOUNT -- " arg))))
  dispatch)

(define acc (make-account 100 'foo))

((acc 'bar 'withdraw) 40)
;Value 13: "Incorrect Password"
((acc 'foo 'withdraw) 40)
;Value: 60
((acc 'foo 'deposit) 20)
;Value: 80

###3.5###
PROMPT:
-----------------------------------------------------------------------------------------------------------------
Exercise 3.5.  Monte Carlo integration is a method of estimating definite integrals by means of Monte Carlo simulation. Consider computing the area of a region of space described by a predicate P(x, y) that is true for points (x, y) in the region and false for points not in the region. For example, the region contained within a circle of radius 3 centered at (5, 7) is described by the predicate that tests whether (x - 5)2 + (y - 7)2< 32. To estimate the area of the region described by such a predicate, begin by choosing a rectangle that contains the region. For example, a rectangle with diagonally opposite corners at (2, 4) and (8, 10) contains the circle above. The desired integral is the area of that portion of the rectangle that lies in the region. We can estimate the integral by picking, at random, points (x,y) that lie in the rectangle, and testing P(x, y) for each point to determine whether the point lies in the region. If we try this with many points, then the fraction of points that fall in the region should give an estimate of the proportion of the rectangle that lies in the region. Hence, multiplying this fraction by the area of the entire rectangle should produce an estimate of the integral.

Implement Monte Carlo integration as a procedure estimate-integral that takes as arguments a predicate P, upper and lower bounds x1, x2, y1, and y2 for the rectangle, and the number of trials to perform in order to produce the estimate. Your procedure should use the same monte-carlo procedure that was used above to estimate . Use your estimate-integral to produce an estimate of  by measuring the area of a unit circle.

You will find it useful to have a procedure that returns a number chosen at random from a given range. The following random-in-range procedure implements this in terms of the random procedure used in section 1.2.6, which returns a nonnegative number less than its input.8

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
-----------------------------------------------------------------------------------------------------------------
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random (/ range 1.0)))))

(define (estimate-integral P x1 x2 y1 y2 trials)
  (define (rect-area)
    (* (abs (- x2 x1)) (abs (- y2 y1))))
  (define (build-experiment)
    (lambda () (P (random-in-range x1 x2)
		  (random-in-range y1 y2))))
  (* (rect-area) (monte-carlo trials (build-experiment))))


(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (p x y)
  (<= (+ (square x) (square y)) 1))

(estimate-integral p -1 1 -1 1 100000)
;; 1000 trials
;Value: 396/125

;; 10000 trials
;Value: 3933/1250

;; 100000 trials
;Value: 19641/6250

###3.6###
-----------------------------------------------------------------------------------------------------------------
Exercise 3.6.  It is useful to be able to reset a random-number generator to produce a sequence starting from a given value. Design a new rand procedure that is called with an argument that is either the symbol generate or the symbol reset and behaves as follows: (rand 'generate) produces a new random number; ((rand 'reset) <new-value>) resets the internal state variable to the designated <new-value>. Thus, by resetting the state, one can generate repeatable sequences. These are very handy to have when testing and debugging programs that use random numbers.
-----------------------------------------------------------------------------------------------------------------


;; Note that I haven't actually tested this in the absence of a rand-update procedure
(define (rand symbol)
  (let ((current-state random-init)) ;; random-init is a hypothetical value
    (cond ((eq? symbol 'generate)
	   (set! current-state (rand-update current-state)) ;; rand-update is a hypothetical procedure
	   current-state)
	  ((eq? symbol 'reset)
	   (lambda (new-value)
	     (set! current-state new-value)))
	  (else (error "unknown input -- RAND -- " symbol)))))
