###1.29###

PROMPT:
------------------------------------------------------------
Exercise 1.29.  Simpson's Rule is a more accurate method of numerical integration than the method illustrated above. Using Simpson's Rule, the integral of a function f between a and b is approximated as


where h = (b - a)/n, for some even integer n, and yk = f(a + kh). (Increasing n increases the accuracy of the approximation.) Define a procedure that takes as arguments f, a, b, and n and returns the value of the integral, computed using Simpson's Rule. Use your procedure to integrate cube between 0 and 1 (with n = 100 and n = 1000), and compare the results to those of the integral procedure shown above.
------------------------------------------------------------

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
	 (sum term (next a) next b))))

(define (cube x) (* x x x))

(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(define (simpsons fn a b n)
  (let ((start a)
	(h (/ (- b a) n)))
    (define (add-h a)
      (+ a h))
    (define (get-k a)
      (/ (- a start) h))
    (define (f-wrapper a)
      (cond ((or (= (get-k a) 1) (= (get-k a) n)) (* 1.0 (fn a)))
	    ((= (remainder (round (get-k a)) 2) 1) (* 4.0 (fn a)))
	    (else (* 2.0 (fn a)))))
    (* (sum f-wrapper (+ a h) add-h b)
       (/ h 3))))

(integral cube 0.0 1.0 0.01)
;Value: .24998750000000042
(integral cube 0.0 1.0 0.001)
;Value: .249999875000001

      
(simpsons cube 0 1 100)
; WITH INT Value: .24999999
; WITH FLOAT Value: .2499999899999999

(simpsons cube 0 1 1000)
; WITH INT Value: .249999999999
; WITH FLOAT Value: .24999999999900022

;;Notice that the floating point multiplications in the cond statement lead to decreased accuracy in Simpson's
;;If the input a is an integer and integers are used in the multiplication, we have greater accuracy

###1.30###
PROMPT:
------------------------------------------------------------
Exercise 1.30.  The sum procedure above generates a linear recursion. The procedure can be rewritten so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following definition:

(define (sum term a next b)
  (define (iter a result)
    (if <??>
        <??>
        (iter <??> <??>)))
  (iter <??> <??>))
------------------------------------------------------------

(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (+ result (term a)))))
    (iter a 0))


###1.31###
PROMPT:
------------------------------------------------------------
Exercise 1.31.   
a.  The sum procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures.51 Write an analogous procedure called product that returns the product of the values of a function at points over a given range. Show how to define factorial in terms of product. Also use product to compute approximations to  using the formula52


b.  If your product procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.
------------------------------------------------------------

(define (product a b term next)
  (if (> a b)
      1
      (* (term a)
	 (product (next a) b term next))))

(define (product-iter a b term next check compare)
  (define (iter a result)
    (if (compare (check a) (check b))
	result
	(iter (next a) (* result (term a)))))
  (iter a 1.0))

(define (factorial n)
  (define (identity x) x)
  (define (fact-next a)
    (+ a 1))
  (product-iter 1 n identity fact-next))

(factorial 5)


(define (pi-approx start-pair stop-pair)
  (define (pi-term a)
    (/ (car a) (cdr a)))
  (define (pi-next a)
    (if (> (car a) (cdr a))
	(cons (car a) (+ (cdr a) 2.0))
	(cons (+ (car a) 2.0) (cdr a))))
  (product-iter start-pair stop-pair pi-term pi-next pi-term =))

(* 4 (pi-approx (cons 2.0 3.0) (cons 1000.0 1001.0)))

###1.32###
PROMPT:
------------------------------------------------------------
Exercise 1.32.  a. Show that sum and product (exercise 1.31) are both special cases of a still more general notion called accumulate that combines a collection of terms, using some general accumulation function:

(accumulate combiner null-value term a next b)

Accumulate takes as arguments the same term and range specifications as sum and product, together with a combiner procedure (of two arguments) that specifies how the current term is to be combined with the accumulation of the preceding terms and a null-value that specifies what base value to use when the terms run out. Write accumulate and show how sum and product can both be defined as simple calls to accumulate.

b. If your accumulate procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.
------------------------------------------------------------

(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
		(accumulate combiner null-value term (next a) next b))))

(define (accumulate-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (combiner result (term a)))))
  (iter a null-value))

###1.33###
------------------------------------------------------------
Exercise 1.33.  You can obtain an even more general version of accumulate (exercise 1.32) by introducing the notion of a filter on the terms to be combined. That is, combine only those terms derived from values in the range that satisfy a specified condition. The resulting filtered-accumulate abstraction takes the same arguments as accumulate, together with an additional predicate of one argument that specifies the filter. Write filtered-accumulate as a procedure. Show how to express the following using filtered-accumulate:

a. the sum of the squares of the prime numbers in the interval a to b (assuming that you have a prime? predicate already written)

b. the product of all the positive integers less than n that are relatively prime to n (i.e., all positive integers i < n such that GCD(i,n) = 1).
------------------------------------------------------------

(define (accumulate-filter combiner null-value term a next b predicate)
  (define (iter a result)
    (if (> a b)
	result
	(if (predicate a)
	    (iter (next a) (combiner result (term a)))
	    (iter (next a) result))))
  (iter a null-value))

(define (expmod base exp m one-mod-n)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (check-one-mod-n (square (expmod base (/ exp 2) m one-mod-n)) one-mod-n)
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m one-mod-n))
                    m))))
(define (check-one-mod-n sqr one-m-n)
  (if (and (= sqr one-m-n) (not (or (= sqr 1) (= sqr (- m 1)))))
      0
      sqr))
(define (miller-rabin n one-mod-n)
  (define (try-it a)
    (= (expmod a (- n 1) n one-mod-n) one-mod-n))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
	((miller-rabin n (remainder 1 n)) (fast-prime? n (- times 1)))
	(else false)))

(define (prime? n)
  (fast-prime? n 5))

(define (sum-filter term a next b predicate)
  (accumulate-filter + 0 term a next b predicate))

(define (product-filter term a next b predicate)
  (accumulate-filter * 1 term a next b predicate))

(define (sum-prime-squares a b)
  (define (square x) (* x x))
  (define (next a) (+ a 1))
  (sum-filter square a next b prime?))

(sum-prime-squares 2 10)
;Value: 87

(define (product-rel-primes n)
  (define (gcd x y)
    (if (= (remainder x y) 0)
	y
	(gcd y (remainder x y))))
  (define (pred a)
    (= (gcd n a) 1))
  (define (identity a) a)
  (define (next a) (+ a 1))
  (product-filter identity 1 next (- n 1) pred))

(product-rel-primes 10)
;Value: 189








