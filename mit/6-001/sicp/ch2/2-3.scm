(define (make-segment start end)
  (cons start end))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))
(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define (average s f)
  (/ (+ (f (start-segment s))
	(f (end-segment s)))
     2))
(define (midpoint s)
  (make-point (average s x-point)
	      (average s y-point)))



(define (length-segment s)
  (hypotenuse s))
(define (hypotenuse s)
  (sqrt (+ (square (grid-distance s x-point))
	   (square (grid-distance s y-point)))))
(define (grid-distance seg coord)
  (abs (- (coord (start-segment seg))
	  (coord (end-segment seg)))))

(let ((point1 (make-point 0 0))
      (point2 (make-point 3 4)))
  (let ((seg1 (make-segment point1 point2)))
    (length-segment seg1)))

(define (make-rectangle p1 p2 p3 p4)
  (cons (cons p1 p2) (cons p3 p4)))
(define (rect-p1 r)
  (car (car r)))
(define (rect-p2 r)
  (car (cdr r)))
(define (rect-p3 r)
  (cdr (car r)))
(define (rect-p4 r)
  (cdr (cdr r)))
