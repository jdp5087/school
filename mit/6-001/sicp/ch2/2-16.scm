###2.16###
------------------------------------------------------------
Exercise 2.16.  Explain, in general, why equivalent algebraic expressions may lead to different answers. Can you devise an interval-arithmetic package that does not have this shortcoming, or is this task impossible? (Warning: This problem is very difficult.)
------------------------------------------------------------

In the interest of forward progress (and due to the fact that I have very limited time), I'm going to just take a jab at the first part of the question and move on.

I'd say that there are two possible reasons. The first is due to the nature of how numbers are stored in computers. Rounding errors can occur with very small or very large numbers that contain a large number of significant digits. When we are dealing with very small intervals, a number that is stored in IEEE floating point format only allocates 23 bits to store the mantissa of a number (because the other 1 bit indicates whether a number is positive or negative, and 8 bits store the exponent of the number). With very small intervals, every missing significant digit will have an impact on the final outcome of the calculation. Every number that requires rounding will reduce the precision of the end result. Every missing 1/10000th will have an impact when the number is multiplied several times.

The first reason is probably not as significant as the second, which relates to the implementation of a formala. Algebra represents an ideal, and symbolic way to manipulate variables. The last question already hinted at this phenomenon. Since the second equation implemented an interval without uncertainty (the one defined in the let statement), the equation ultimatetely had more fidelity to the outcome resistance than par1. Furthermore, algebra does not assume a layer of abstraction in its governing rules. For instance, the algebraic equation ((R1R2)/(R1+R2)) is equivalent to (1/((1/R1)+(1/r2))), but that is when the variables represent integers or real numbers. It has no way to account for the fact that R1 and R2 actually represent a range of numbers. That is why par2, which uses the interval "one", is more accurate, because an interval with no uncertainty behaves more like an integer or a real number.

NOTE: Curiosity got the best of me, so I looked up the answer to the second part of this question. Apparently, the answer is that a package cannot be developed. And the reason is that repeating an uncertain variable in a calculation results in an implementation that cannot be the same accross equivalent algebraic equations. If the repetition of uncertain variables can be avoided, then a system could be implemented, but in the case of interval arithmetic, that is not possible.
