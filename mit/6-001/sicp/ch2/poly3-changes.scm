  (define (structure term)
    (cond ((not (poly? (coeff term))) (cons (cons (order term) (type-tag (coeff term))) '())
	  (else (cons (cons (order term) (variable (contents (coeff term))))
		      (structure (term-list (contents (coeff term)))))))))
  (define (identical-structure? t1 t2)
    (let ((t1-structure (structure t1))
	  (t2-structure (structure t2)))
      (if (equal? t1-structure t2-structure)
	  true
	  false)))
  
  (define (simplify-termlists termlist1 termlist2)
    (define (simplify-term term termlist keepers)
      (cond ((empty-termlist? termlist)
	     (cons term keepers))
	    ((identical-structure? term (first-term termlist))
	     (cons (first-term (add-terms (adjoin-term term (the-empty-termlist 'sparse))
					  (adjoin-term (first-term termlist) (the-empty-termlist 'sparse))))
		   (adjoin-termlists keepers (rest-terms termlist))))
	    (else (simplify-term term (rest-terms termlist) (adjoin-term (first-term termlist) keepers)))))
    (define (iter L1 L2 new-L1)
      (if (empty-termlist? L1)
	  (cons new-L1 l2)
	  (let ((result (simplify-term (first-term L1) l2 (the-empty-termlist 'sparse))))
	    (iter (rest-terms L1) (cdr result) (adjoin-term (car result) new-L1)))))
    (iter termlist1 termlist2 (the-empty-termlist 'sparse)))

