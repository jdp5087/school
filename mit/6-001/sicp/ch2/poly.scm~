(define (install-sparse-package)
  ;; polynomial procedures
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (variable? x) (symbol? x))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (poly-zero? p)
    (define (zero-iter terms)
      (if (empty-termlist? terms)
	  true
	  (let ((first (first-term terms)))
	    (if (=zero? (coeff first))
		(zero-iter (rest-terms terms))
		false))))
    (zero-iter (term-list p)))
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
	term-list
	(cons term term-list)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (sparse-repr p)
    (term-list p))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (add-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- ADD-POLY"
	       (list p1 p2))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
	(make-poly (variable p1)
		   (mul-terms (term-list p1)
			      (term-list p2)))
	(error "Polys not in same var -- MUL-POLY"
	       (list p1 p2))))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
	  ((empty-termlist? L2) L1)
	  (else
	   (let ((t1 (first-term L1)) (t2 (first-term L2)))
	     (cond ((> (order t1) (order t2))
		    (adjoin-term
		     t1 (add-terms (rest-terms L1) L2)))
		   ((< (order t1) (order t2))
		    (adjoin-term
		     t2 (add-terms L1 (rest-terms L2))))
		   (else
		    (adjoin-term
		     (make-term (order t1)
				(add (coeff t1) (coeff t2)))
		     (add-terms (rest-terms L1)
				(rest-terms L2)))))))))
  
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
	(the-empty-termlist)
	(add-terms (mul-term-by-all-terms (first-term L1) L2)
		   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
	(the-empty-termlist)
	(let ((t2 (first-term L)))
	  (adjoin-term
	   (make-term (+ (order t1) (order t2))
		      (mul (coeff t1) (coeff t2)))
	   (mul-term-by-all-terms t1 (rest-terms L))))))
  
  (define (neg p)
    (cons (variable p) (map (lambda (x) (negate (coeff x))) (term-list p))))  
  ;;; Interface to outside
  (define (tag p) (attach-tag 'sparse p))
  (put 'add '(sparse sparse)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(sparse sparse)
       (lambda (p1 p2) (tag (add-poly p1 (neg p2)))))
  (put 'mul '(sparse sparse)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'sparse
       (lambda (var terms) (tag (make-poly var terms))))
  (put 'zero '(sparse)
       (lambda (p) (poly-zero? p)))
  (put 'negate '(sparse) (lambda (p) (tag (neg p))))
  'done)

(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))
  
(define (install-packages)
  (install-scheme-number-package)
  (install-rational-package)
  (install-real-package)
  (install-complex-package)
  (install-rectangular-package)
  (install-polar-package)
  (install-polynomial-package))

(install-packages)




(define (install-dense-polynomial-package)
  (define (make-poly var terms) (cons var terms))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (variable? x) (symbol? x))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (poly-zero? p)
    (accumulate (lambda (x y)
		  (if y
		      true
		      (=zero? (coeff x))))
		false
		(term-list p)))
  (define (order-index term-list order)
    (- (max-order term-list) order))
  (define (max-order term-list)
    (- (length term-list) 1))
  (define (get-term-by-order term-list order)
    (make-term order (list-ref term-list (order-index term-list order))))
  (define (adjoin-term term term-list)
    (define (gen-append-list term term-list max-order term-order)
      (if (> term-order max-order)
	  (extend-term-list term term-list max-order term-order)
	  (insert-term-list term term-list max-order term-order)))
    (define (extend-term-list t tl mo to)
      (append (coeff t)
	      (make-list (- to (+ mo 1)) 0)
	      tl))
    (define (insert-term-list t tl mo to)
      (append (list-head tl (- mo to))
	      (list (coeff (add-term (get-term-by-order tl to)
				     t)))
	      (list-tail tl (+ 1 (order-index tl to)))))
    (cond ((and (empty-term-list? term-list) (= (order term) 0))
	   (list (coeff term)))
	  ((=zero? (coeff term)) term-list)
	  (else (gen-append-list term
				 term-list
				 (max-order term-list)
				 (order term)))))
  (define (empty-term-list? term-list)
    (null? term-list))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (make-term (max-order term-list)
					    (car term-list)))
  (define (rest-terms term-list) (cdr term-list))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (make-term order coef) (list order coef))
  (define (dense-repr p)
    p)
  (define (sparse-repr p)
    (define (sparse-iter term-list order)
      (cond ((empty-term-list? term-list) (the-empty-termlist))
	    ((=zero? (first-term term-list)) term-list)
	    (else make-term (first-term term-list))))
    (let ((p-variable (variable p))
	  (p-term-list (term-list p)))
      (cons p-variable (sparse-iter term-list-p (max-order term-list-p)))))

    (define (neg p)
      (cons (variable p) (map (lambda (x) (negate x)) (term-list p))))
  (define (tag p) (attach-tag 'sparse p))

  ;; interface to system
  (put 'dense-repr '(dense) (lambda (p) (tag (dense-repr p))))
  (put 'sparse-repr '(sparse) (lambda (p) (tag (sparse-repr p))))
  (put 'add '(dense dense) (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(dense dense) (lambda (p1 p2) (tag (add-poly p1 (neg p2)))))
  (put 'mul '(dense dense) (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'dense
       (lambda (var terms) (tag (make-poly var terms))))
  (put 'zero '(dense) (lambda (p) (zero? p)))
  (put 'negate '(dense) (lambda (p) (tag (neg p))))
  
(define (make-dense-polynomial var terms)
  ((get 'make 'dense var terms)))


(define (install-polynomial-package)
  

