(define (make-segment start end)
  (cons start end))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))
(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define (average s f)
  (/ (+ (f (start-segment s))
	(f (end-segment s)))
     2))
(define (midpoint s)
  (make-point (average s x-point)
	      (average s y-point)))
(define (length-segment s)
  (hypotenuse s))
(define (hypotenuse s)
  (sqrt (+ (square (grid-distance s x-point))
	   (square (grid-distance s y-point)))))
(define (grid-distance seg coord)
  (abs (- (coord (end-segment seg))
	  (coord (start-segment seg)))))
(define (make-length p1 p2)
  (make-segment p1 (make-point (x-point p2) (y-point p1))))
(define (make-width p1 p2)
  (make-segment p1 (make-point (x-point p1) (y-point p2))))
(define (make-rectangle p1 p2)
  (cons (make-length p1 p2)
	(make-width p1 p2)))
(define (rect-length r)
  (length-segment (car r)))
(define (rect-width r)
  (length-segment (cdr r)))
(define (rect-perimeter r)
  (* 2 (+ (rect-length r)
	  (rect-width r))))
(define (rect-area r)
  (* (rect-length r)
     (rect-width r)))
(let ((p1 (make-point 0 0))
      (p2 (make-point 4 4)))
  (let ((rect1 (make-rectangle p1 p2)))
    (newline)
    (display "Perimeter: ")
    (display (rect-perimeter rect1))
    (newline)
    (display "Area: ")
    (display (rect-area rect1))))
(let ((p1 (make-point 0 0))
      (p2 (make-point 8 4)))
  (let ((rect1 (make-rectangle p1 p2)))
    (newline)
    (display "Perimeter: ")
    (display (rect-perimeter rect1))
    (newline)
    (display "Area: ")
    (display (rect-area rect1))))
