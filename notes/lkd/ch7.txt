interrupts allow hardward to signal processor when ready
signals occur asyncronously with cpu timer
kernel can be interrupted at any time to process interrupts

an interrupt is physically produced by electronic signals originating from hardware
directed into input pins on an interrupt controller -- chip that multiplexes interrupt lines into a single
line to the processor

when interrupt controller recieves an interrupt signal, it sends a signal to the cpu, which stops current execution to handle the interrupt

processor then notifies the operating system, which can handle the interrupt appropriately

each device is distinguished by a unique value

interrupt values are often called interrupt request (IRQ) lines -- numeric value

exceptions, unlike interrupts occur syncronously with the processor clock
	    produced by processor
	    errors
	    abnormal conditions (ie page fault)

kernel infrastructure for handling both is similar

a system call is a software interrupt, which traps into the kernel

function that the kernel runs in response to an interrupt is an interrupt handler or interrupt service routine (ISR)

each device has its own interrupt handler -- part of device's driver
     ordinary C functions
     run in a special context -- interrupt context or atomic context, unable to block

two goals:
    interrupt handler must perform quickly
    handle large amounts of work

because of these conflicting goals, interrupt handlers are split into top halves and bottom halves

top half is the interrupt handler
    run immediately upon receipt of the interrupt
    performs only time-critical work -- like acknowledgement and resetting hardware

bottom half
       runs in future with all interrupts enabled

network card example
{
must notify kernel immediately upon recieved packets to optimize network throughput-- avoid timeouts
kernel responds by running associated interrupt handler with process
jobs to be done:
     acknowledge hardware
     copy packets into main memory
     prepare network card for more packets
needs to happen quickly because network card data buffers are tiny
}

interrupt handlers are the responsibility of the driver managing the hardware
	  each device has one driver, which registers a handler

enable a given interrupt line with request_irq() from <linux/interrupt.h>

int request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char name, void *dev)

irq_handler_t is a function pointer

signature:

typedef (*irq_handler_t)(int, void *);

flags can be zero or a bitmask of types defined in <linux/interrupt.h>

IRQF_DISABLED - disable interrupts during execution of this handler
IRQF_SAMPLE_RANDOM - interrupt should contribute to the kernel entropy pool
IRQF_TIMER - handler processes interrupts from system timer
IRQF_SHARED - an interrupt line can be shared among multiple interrupt handlers - each handler on a given line must specifiy this flag

fourth  parameter is an ASCII text representation of the device associated with the interrupt
	these text names are used by /proc/irq and /proc/interrupts

fifth parameter, dev, is used for shared handlers, so the kernel knows which handler to remove from the line
      common practice is to pass the device structure, as it is unique
     
the interrupt handler also recieves this pointer every time it is called

EBUSY indicates that the given interrupt line is already in use

never call request_irq when in a context where it is unsafe to block because:

proc_mkdir() -> proc_create() -> kmalloc() -- kmalloc() can sleep

it is important to initialize hardware before registering an interrupt to prevent an interrupt handler running before the device is fully initalized

must unregister an interrupt handler when a driver unloads:

void free_irq(unsigned int irq, void *dev)
interrupt line is disabled only when last interrupt handler has been removed.
	  dev must be unique and match a device on given irq line


interrupt handler signature:

static irqreturn_t intr_handler(int irq, void *dev)
       dev is the same dev passed to request_irq

an interrupt handler returns irqreturn_t, which can be either:
   IRQ_NONE -- returned when device was not originator
   IRQ_HANDLED -- durrr

IRQ_RETVAL(val) - returns IRQ_HANDLED if val is nonzero, else IRQ_NONE

the typedef of irqreturn_t provides backward compatibility

interrupt handler is normally marked static because it is not called from another file.

interrupt handlers need not be reentrant, because the current interrupt line is disabled while the interrupt handler is running. This means that other interrupts can be serviced without risk

diff between nonshared and shared:
     IRQF_SHARED must be set in flags arg to request_irq
     dev argument must be unique -- cannot pass NULL
     handler must be able to determine whether its device generated the interrupt

all drivers sharing interrupt line must meet these requirements
    if one doesn't none can share line

each handler on a shared line is checked sequentially, this means that a device must have a status register to indicate whether it caused the interrupt

Real Time Clock (RTC) seperate from system timer
     sets system clock, provides an alarm, supplies a periodic timer

set by writing a time into a specific registor or IO range

rtc_init initializes the driver (calls request_irq() on a shared line)

looks like there are different request_irqs depending on the architecture. Sparc 32 does a shared line, while on a pc, the request_irq is not shared, and on IRQ 8... I'm not sure what Love is talking about here, it seems like he mixed the two together

rtc_interrupt runs with interrupts disable but there is a possibility of conflicting with set_rtc_mmss(), which is defined in arch/XXXX/kernel/time.c

High Precision Event Timer (HPET) is a hardware timer used in PCs incorporated in pc chipsets since circa 2005

Advanced Configuration and Power Interface (ACPI) - specification defining an open standard for device configuration and power management by the operating system
	 platform independent interfaces for hardware discovery

BIOS -- Basic Input/Output System
     de facto standard defining a firmware interface
     BIOS software is built into the pc and is first software run when PC powered on
     fundamental purposes:
     		 initialize and test hardware components
		 load a bootloader from mass memory device
		 abstraction layer providing a consistent way for kernel and software to interface with
		 hardware like keyboard, display, and other IO
		 	  MS-DOS did rely on bios, linux doesnt, directly accesses hardware

BIOS is software stored on a ROM chip on the motherboard
specifically designed to work with each model of computer
	     contents stored on flash memory so it can be rewritten without removing from motherboard

Modern BIOS settings can be managed interactively

CMOS - Complementary metal-oxide-semiconductor
     technology for constructing integrated circuits
     used in microprocessors, microcontrollers, static RAM, and other dig logic circuits
     also used in several analog circuits such as image sensors, data converters, and highly 
     	  integreted transceivers
     high noise immunity and low static power consumption
     only draws significant power when changing states

VLSI - Very-large-scale integration
     most commonly uses CMOS -- microprocessors is VLSI
     
rtc_interrupt
{
acquire a spin lock
add the 9th bit, & by using ~0xff as a mask
if high precision event timer is enabled, irq param is actually interrupt info, or bits 4-7 with rtc_irq_data
else read from the CMOS RCT_INTR_FLAGS bits 4-7
if rtc_timer is on, mod_timer (update) -- will discuss timers in ch 11
the rest of the functions are a series of callbacks. with a lock on rtc_task_lock makes sure data used by rtc_callback is not used during its call
kill_fasync
return IRQ_HANDLED flag
}

look in to the callbacks and kill_fasync

real-time clock (RTC) example:
	  seperate from sytem timer, sets the system clock, provides alarm, or supplies periodic timer

any alarm or periodic timer is generally implemented via interrupt

after RTC driver loads, the function rtc_init() is invoked to initialize the driver


when executing an interrupt handler, the kernel is in interrupt context
     in this mode the kernel is executing on behalf of a process

during process context:
     current macro points to associated task
     process can sleep or invoke scheduler while the kernel is in process context

interrupt context is not associated with a task
	  current macro is not relevant
	  cannot sleep because reschedule is not possible

time critical
     must be quick and simple as possible
     utilize bottom half as much as possible

memory limited:
       8 kb (32 bit) or 16 kb (64 bit) stack for all interrupt handlers that run while a process is executing
       interrupt handlers must be frugal

an option on 32-bit systems exists to reduce stack size to 4k, but have each interrupt handler have its own stack
   called the interrupt stack
   one per processor
   average  space available is actually greater because interrupt handlers get full stack to themselves

regardless always use minimum amount of space possible

implementation of interrupt handling is architecture dependant

devices issues an interrupt via an electrical signal sent to the interrupt controller
if interrupt line is enabled, the interrupt conroller forwards to interrupt to the processor
interrupts can be disabled in the processor
if not, the processor stops what it is doing, disables interrupts, and jumps to the interrupt entry point

for each interrupt line, the processor jumps to a set palce and executes the code located there. This is how the kernel knows the IRQ number of the incoming interrupt
initial entry point saves the IRQ value and stores the status of the interrupted tasks registers on the stack
then do_IRQ() is called

after this point most interrupt code is written in C

signature of do_IRQ():
unsigned int do_IRQ(struct pt_regs regs)

pt_regs holds the previous value of registers and the IRQ value

mask_and_ack_8259A() on pcs acknowledges the receipt of an interrupt and disables the interrupt line

looks like interrupt handling can occur per CPU on SMP systems

void handle_percpu_irq(unsigned int irq, struct irq_desc *desc)
{
im guessing the first statement increments statistics of how many interrupts are currently on cpu
acknowledge receipt if necessary
handle the event
}

irqreturn_t
handle_irq_event_percpu(struct irq_desc *desc, struct irqaction *action)
{
set retval to IRQ_NONE
save flags as 0 and irq as desc->irq_data.irq
trace_irq_handler in action->handler while it does its thing
the processor disables irqs, so if IRQF_DISABLED wasnt on, re-enable irq interrupts
catch drivers which wake_thread but didnt set up thread functions
otherwise wake thread,
set flags to action->flags
or retval with result
set action to action->next
do that whole thing until action is NULL
add_interrupt_randomness(irq, flags) <- adds to entropy to be used by random number generator
if irqdebug is on, note the interrupt
return retval
}

this doesnt originate from do_IRQ, so there are differences, like the function doesnt do local_irq_disable when done


ret_from_intr()
{
checks whether a resched is pending (need_resched is set)
if returning to user_space, resched can be called
if returing to kernel_space, resched can only be called if preempt count is 0
after schedule(), if no other work is to be done, original registers are restored
}

see entry_32.S or entry_64.S for x86

procfs is a virtual filesystem that exists only in kernel memory, typically mounted at /proc
       simulates a real file

looks like there are different kinds of device controller
      IO-APIC-edge
      IO-APIC-fastoi
      IO-APIC (generic maybe?)
      PCI-MSI-edge


function that provides /proc/interrupts is show_interrupts()

linux implements a family of interfaces to manipulate state of interrupts

arch-dependant and found in <asm/system.h> and <asm/irq.h>

the main reason for manipulating interrupt state is to provide for synchronization
    can guarantee current code will not be interrupted
    disabling interrupts also disables kernel preemption
    this does not guarantee lack of concurrent access from another cpu
    	 for this a lock of some sort is needed

to disable and enable interrupts (only on current cpu):
local_irq_disable()
...do stuff
local_irq_enable()

both funcs are implemented in asm
     basically assembly calls to clear and set the flags for allow interrupts

bit 9 of the FLAGS register in x86

it is dangerous to disable and then enable, because if interrupts were already disabled when a function was called, then enabling will incorrectly enable interrupts when returning to the previous function. Since it is too difficult to know all code paths in the kernel, it is better to just use a function to save and then return to prev state

local_irq_save(flags);
local_irq_restore(flags);

flags are saved in the stack on some architectures, so the calls to local_irq_save and local_irq_restore must occur within the same function.

cli used to be global, it is not anymore, so now must use local irq disable/enable and spin locks

advantage is that fine-grained locks are faster, streamlined interrupt system, easier to comprehend

four functions for disabling a specific interrupt line:
     void disable_irq(unsigned int irq);
     	  disables interrupts to specified irq on all processors
	  does not return until any currently executing handler completes
	       (is this all interrupts or just for specific irq?)
	  
     void disable_irq_nosync(unsigned int irq);
     	  this one doesn't wait for completion of current handlers

     void enable_irq(unsigned int irq);
     	  these functions nest, so only the last call to enable_irq actually enables line

     void syncronize_irq(unsigned int irq);

these can be called from interrupt context, but be careful not to enable interrupts for a line being currently handled

bad idea to diable interrupts on a shared line
    the previous functions are usually seen in legacy drivers

irqs_disabled in <asm/system.h> returns nonzero if the interrupt system on the local cpu is disabled

from <linux/hardirq.h>
     in_interrupt()
	nonzero if kernel is performing any type of interrupt handling
		includes interrupt handler or bottom half
     in_irq()
	only nonzero if executing an interrupt handler
	


Serial communication
       transmission of bits sequentially, rather than parallel
       advances in signal integrity and transmission speed are starting to make serial communication
       		faster than parallel design, even at short distances
	serial transmission results in lower cost cable
	good examples of serial
	     keyboard, mouse USB, digital video

ISA - Industry Standard Architecture
    not widely used any more
    16-bit internal bus of IBM PC/AT
    supports up to 6 8-bit irq devices, 5 16-bit irq devices, four devices for 8-bit DMA or 3 devices for 16-bit DMA

PCI - Peripheral Component Interconnect
    PCI Local Bus Standard
    supports all functions of a processor bus but in a way that is arch independant
    devices connected to PCI appear to bus master to be directly connected
    assigned address in processors address space
    parallel, syncronous to a single bus clock
    attached devices can be integrated circuits on motherboard itself or exansion cards in slots
    typical devices: network cards, sound cards, modems, extra ports such as usb or serial,
    	    tv tuner cards and disc controllers
    video cards require too much bandwidth for pci, preferred interface is now PCI Express

PCI and PCI-X are somtimes called Parallel PCI in order to distinguish from PCI Express
    PCI has become obsolete for most purposes -- still exist for backwards compat

PCIe (Peripheral Component Interconnect Express)
     high speed serial computer expansion bus
     higher max throughput, lower I/O pin count and smaller physical footprint
     better scaling
     better error detection and reporting (AER -- Advanced Error Reporting)
     native hot-plug functionality
PCIe architecture
     high-speed serial replacement of old PCI/PCI-X
     point-to-point topology -- seperate serial links connecting every device to root complex
     hmmmm bus clock?
     full-duplex communication between any two endpoints
     no inherent limitation on concurrent access across multiple endpoints
     uses packets
     packetizing and de-packetizing handled by the transaction layer of the PCIe port
     a point-to-point connection processes the following PCI-requests
       configuration read/write, I/O read/write, memory read/write
       interrupts (INTx, MSI, MSI-X)?
     an interconnect or link is composed of between 1 and 32 lanes, where lower speed devices use few lanes
     	and high speed devices like graphics cards use x16 or more

Univesal Serial Bus
	 CONTINUE WITH THIS
     
hot swapping -- the ability to replace computer system components without significant disruption to system
     
hot-plugging -- ability to add to system without sig. disruption


