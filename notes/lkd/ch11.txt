TIMERS AND TIME MANAGEMENT

both relative and absolute time are used

periodic events are driven by system timer
	 programmable hardware that issues interrupt at a given frequency
	 interrupt handler is called the timer interrupt

dynamic timers
	schedule events after a specified time
	can be created and destroyed dynamically

system timer works off an electronic time source
       such as digital clock or cpu frequency
       timer going off is called hitting or popping
       handled by timer interrupt handler

period between interrupts is a tick

wall time
     actual time of day
     important to user space
     kernel tracks simply becuase it timer interrupt

functions that depend on system timer
	  system uptime
	  time of day
	  balancing of scheduler runqueues on SMP
	  running dynamic timers that have expired
	  resource usage and processor time stats

HZ -- hertz is the measure of the period, so on x86 the defautl is 100 so an interrupt every 1/100 seconds
   never hard code tick rate, always use HZ

lower HZ offers:
      better resolution
      accuracy of timed events improves
      on average, a timer interrupt is off by half the length of a period (because it doesn't coincide
      	 exactly with the interrupt handler)
      system calls such as poll and select occur with improved precision
      resource usage and other measurements have a finer resolution
      preemption occurs more accurately

disadvantages:
	higher overhead for handling the timer interrupt
	       this also leads to thrashing of the cpu cache
	
tickless OS
	 schedule timer interrupts for when they are needed

jiffies -- number of ticks since system boot

therefore a jiffy is the time between two sucessive clock ticks

system uptime == jiffies/HZ seconds

convert from second to ticks with
	(second * HZ)

kernel rarely cares about converting from ticks to seconds

declaration of jiffies:

extern unsigned long volatile jiffies;

any type other than unsigned long is incorrect

through a linker script in arch/x86/kernel/vmlinux.lds.s, the first half of jiffies_64 is jiffies, cool!

to access jiffies_64 use get_jiffies_64 -- this is a special function that acts atomically access all 8 bytes
   locks jiffies count via xtime_lock


wraparound is a concern in jiffies
	   32-bit jiffies can only store 2**32 -1 jiffies
	   bugs can occur when waiting for some future event, but jiffies wrap around
	   	during wait, giving appearance that time has actually started over

just use macros
     time_after(unknown, known)
     time_before
     time_after_eq
     time_before_eq

because of set interfaces, jiffies must be scaled when exported to user space
	USER_HZ defines expected ticks (probably 100)
	
jiffies_to_clock_t does the correct scaling for the userspace
		   if they are integer multiples
		      x / (HZ / USER_HZ)

     
two hardware devices for time keeping
    system timer -- issues interrupts HZ times per sec
    Real-Time Clock -- keeps track of time even when device is off through a battery on system board
    	      on PC's RTC and CMOS are integrated
	      	 battery also preserves BIOS settings
    on boot, RTC is used to initialize wall time -- stored in xtime variable

for system timer, the hardware either uses an electronic clock that oscillates at a certian frequency
    either that or uses a decrementer

x86 -- Programmable Interrupt Timer (PIT)
    other x86 time sources include
    	  local APIC timer -- hardwired to each CPU
	  	Advanced Programmable Interrupt Controller
			 oscillates at the same rate as the cpu to which it is wired
			 LAPICS handle all external interrupts for a specific processor
			 	also handle interprocessor interrupts
				PCI cards no longer need to map their interrupts to ISA
			timer on APIC allows for aperiodic (tickless) kernel

I/O APIC redirects interrupts from peripherals to LAPICs

timer interrupt handler is broken into two parts
      arch dependant
      arch independant

varies by arch, but generally the arch-dependant handler does the following:
       xtime_lock which protects jiffies_64 and x_time (wall time)
       acknowledge or reset system timer
       periodically save wall time to RTC
       tick_periodic -- this is the architecture-independant routine
       
       
function of tick_periodic()
	 increment jiffies_64 by one -- safe because we still have x_time_lock
	 update system and user time for currently running process
	 run expired dynamic timers
	 execute scheduler_tick
	 update wall time
	 load average


the kernel credits a process for running in whatever mode it was in during timer interrupt for the whole
    previous tick, even though there were probably many transitions between user and kernel spaces during tick
    
run_local_timers() -- runs any expired timers to be run by a softirq

scheduler_tick decrements current processes timeslice
	       sets need_resched if needed
	       balances runqueues as needed

struct timespec holds time in seconds since January 1st, 1970
       tv_nsec is the number of nanoseconds elapsed this second

reading or writing xtime requires xtime_lock, which is a seqlock
	remember that a seqlock is a reader/writer lock that favors writers

primary user-space interface for getting time is gettimeofday()
	implemented as sys_gettimeofday() -- NO LONGER TRUE

this is boring...moving on to dynamic timers

timers are represented by struct timer_list
       holds a list_entry
       expiration in jiffies
       internal timer field -- not sure
       function to execute when timer expires
       address of data -- looks like flags

as with most data structures in the kernel, there are macros to init a timer
   declare my timer
   init_timer(&my_timer)
   set fields manually
   add_timer(&my_timer) -- activate


mod_timer modifies the expiration of a timer

deactivate prior to expiration
	   del_timer(&my_timer)
	   returns 0 if already inactive otherwise 1

del_timer_sync for SMP -- cant guarantee that the handler isnt running already on a diff cpu

never delete a timer, set its expiration for the future, and then add it back

use del_timer_sync
    
protect data used by timer handler function

the timer interrupt adds expired timers to a linked list, where the will be executed in bottom half softirq
    run_timer_softirq

sometimes code needs to delay execution but not a spin lock
	  for instance, a driver waiting for hardware to change modes

busy looping
     integer multiple of jiffies
     simply a while loop that waits for time_before(jiffies, timeout) to be false
     better to reschedule
     	    ONLY FROM PROCESS CONTEXT

interesting note, normally c compiler only loads a variable once,
	    however, jiffies is registered as volatile, so the compiler makes no assumptions
	    	     this means we can loop and check jiffies every time and be sure that it will be correct


delays defined in <linux/delay.h> and <asm/delay.h>:
       udelay
       ndelay
       mdelay

       
BogoMIPS -- Bogus million instructions per second
	 number of busy loop iterations a processor can perform in a given period
	 value stored in loops_per_jiffy

if longer than one millisecond, do not use udelay, use mdelay for performance reasons

unless extreme precision is needed (in which case use one of the xdelays)
       schedule_timeout(time_period)
       no guarantee that it will wake up exactly at end of period
       set_current_state(TASK_INTERRUPTIBLE or TASK_UNINTERRUPTIBLE)



schedule_timeout basically uses a dynamic timer
		 we assume that the tast is already in a sleep state TASK_INTERRUPTIBLE or TASK_UNINTERRUPTIBLE
		 make a timer to run a function that wakes up the task when time expires
		      if task is interruptible and woken before timer, return time left on wait

		 


